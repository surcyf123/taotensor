# type Account @entity {
#   "Account address"
#   id: ID!
#   hotkeys: [Hotkey!]! @derivedFrom(field: "account")
#   transfersFrom: [Transfer!]! @derivedFrom(field: "from")
#   transfersTo: [Transfer!]! @derivedFrom(field: "to")
#   balance: BigInt!
#   blockNum: Int!
# }

type Transfer @entity {
  "Transfer ID"
  id: ID!
  blockHash: String!
  from: Coldkey! @index
  to: Coldkey! @index
  amount: BigInt! @index
  blockNum: Int! @index
  timestamp: BigInt! @index
}

type Coldkey @entity {
  "Coldkey address"
  id: ID!
  transferFrom: [Transfer!]! @derivedFrom(field: "from")
  transferTo: [Transfer!]! @derivedFrom(field: "to")
  balance: BigInt!
  blockNum: Int!
}

type Hotkey @entity {
  "Hotkey address"
  id: ID!
}

type Burn @entity {
  id: ID!
  blockNum: Int! @index
  timestamp: BigInt! @index
  amount: BigInt!
  netuid: Int! @index
}

type Difficulty @entity {
  id: ID!
  blockNum: Int! @index
  timestamp: BigInt! @index
  amount: BigInt!
  netuid: Int! @index
}

type Neuron @entity {
  "Neuron address"
  id: ID!
  coldkeyAddress: String!
  hotkeyAddress: String!
  uid: Int!
  stake: BigInt!
  rank: BigInt!
  incentive: BigInt!
  trust: BigInt!
  consensus: BigInt!
  dividends: BigInt!
  emission: BigInt!
  ip: BigInt!
  port: Int!
  version: Int!
  lastUpdated: BigInt!
  blockNum: Int!
  createdAt: DateTime!
}

type NeuronRegistered @entity {
  id: ID!
  blockNum: Int! @index
  timestamp: BigInt! @index
  netuid: Int! @index
  uid: Int!
  hotkey: Hotkey! @index
}
